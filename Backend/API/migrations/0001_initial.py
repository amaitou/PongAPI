# Generated by Django 4.2.14 on 2024-08-06 16:53

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PlayerInfo',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('avatar', models.ImageField(null=True, upload_to='avatars/')),
                ('gender', models.CharField(choices=[('M', 'M'), ('F', 'F'), ('N', 'N')], default='N', max_length=2, null=True)),
            ],
            options={
                'verbose_name': 'PlayerInfo',
                'verbose_name_plural': 'PlayerInfo',
                'db_table': 'PlayerInfo',
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PlayerGameStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('won_games', models.IntegerField(default=0)),
                ('level', models.IntegerField(default=0)),
                ('rank', models.CharField(choices=[('Beginner', 'Beginner'), ('Amateur', 'Amateur'), ('Semi-Pro', 'Semi-Pro'), ('Pro', 'Pro'), ('World Class', 'World Class'), ('Legendary', 'Legendary'), ('Ultimate', 'Ultimate')], default='Beginner', max_length=20)),
                ('lost_games', models.IntegerField(default=0)),
                ('draw_games', models.IntegerField(default=0)),
                ('won_tournaments', models.IntegerField(default=0)),
                ('total_tournaments', models.IntegerField(default=0)),
                ('experience_points', models.IntegerField(default=0)),
                ('player_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_gme_stats', to='API.playerinfo')),
            ],
            options={
                'verbose_name': 'PlayerGameStats',
                'verbose_name_plural': 'PlayerGameStats',
                'db_table': 'PlayerGameStats',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('notification_type', models.CharField(choices=[('Friend Request', 'Friend Request'), ('Game Request', 'Game Request'), ('Game Result', 'Game Result'), ('Chat', 'Chat'), ('Tournament', 'Tournament')], max_length=20)),
                ('notification_content', models.TextField()),
                ('notification_date', models.DateTimeField(auto_now_add=True)),
                ('notification_id', models.AutoField(primary_key=True, serialize=False)),
                ('notification_is_read', models.BooleanField(default=False)),
                ('player_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_notification', to='API.playerinfo')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notification',
                'db_table': 'Notification',
            },
        ),
        migrations.CreateModel(
            name='GameResults',
            fields=[
                ('player_1_score', models.IntegerField(default=0)),
                ('player_2_score', models.IntegerField(default=0)),
                ('game_date', models.DateTimeField(auto_now_add=True)),
                ('game_id', models.AutoField(primary_key=True, serialize=False)),
                ('player_1_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='winner', to='API.playerinfo')),
                ('player_2_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loser', to='API.playerinfo')),
            ],
            options={
                'verbose_name': 'GameResults',
                'verbose_name_plural': 'GameResults',
                'db_table': 'GameResults',
                'indexes': [models.Index(fields=['player_1_id', 'player_2_id'], name='GameResults_player__1be712_idx')],
            },
        ),
        migrations.CreateModel(
            name='FriendshipList',
            fields=[
                ('friendship_date', models.DateTimeField(auto_now_add=True)),
                ('friendship_id', models.AutoField(primary_key=True, serialize=False)),
                ('friend_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend', to='API.playerinfo')),
                ('player_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player', to='API.playerinfo')),
            ],
            options={
                'verbose_name': 'FriendshipList',
                'verbose_name_plural': 'FriendshipList',
                'db_table': 'FriendshipList',
                'indexes': [models.Index(fields=['player_id', 'friend_id'], name='FriendshipL_player__b713f4_idx')],
                'unique_together': {('player_id', 'friend_id')},
            },
        ),
        migrations.CreateModel(
            name='FriendRequests',
            fields=[
                ('friend_request_id', models.AutoField(primary_key=True, serialize=False)),
                ('request_status', models.CharField(choices=[('Pending', 'Pending'), ('Accepted', 'Accepted'), ('Declined', 'Declined')], default='Pending', max_length=20)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('receiver_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='request_receiver', to='API.playerinfo')),
                ('sender_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='request_sender', to='API.playerinfo')),
            ],
            options={
                'verbose_name': 'FriendRequests',
                'verbose_name_plural': 'FriendRequests',
                'db_table': 'FriendRequests',
                'indexes': [models.Index(fields=['sender_id', 'receiver_id'], name='FriendReque_sender__49e4ab_idx')],
                'unique_together': {('sender_id', 'receiver_id')},
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('message_content', models.TextField()),
                ('message_date', models.DateTimeField(auto_now_add=True)),
                ('message_id', models.AutoField(primary_key=True, serialize=False)),
                ('receiver_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message_receiver', to='API.playerinfo')),
                ('sender_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message_sender', to='API.playerinfo')),
            ],
            options={
                'verbose_name': 'Conversation',
                'verbose_name_plural': 'Conversation',
                'db_table': 'Conversation',
                'indexes': [models.Index(fields=['sender_id', 'receiver_id'], name='Conversatio_sender__d3165c_idx')],
            },
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('chat_status', models.CharField(choices=[('chatted', 'chatted'), ('not_chatted', 'not_chatted')], default='not_chatted', max_length=20)),
                ('chat_id', models.AutoField(primary_key=True, serialize=False)),
                ('player_1_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_1_instance', to='API.playerinfo')),
                ('player_2_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_2_instance', to='API.playerinfo')),
            ],
            options={
                'verbose_name': 'Chat',
                'verbose_name_plural': 'Chat',
                'db_table': 'Chat',
                'indexes': [models.Index(fields=['player_1_id', 'player_2_id'], name='Chat_player__4798bc_idx')],
                'unique_together': {('player_1_id', 'player_2_id')},
            },
        ),
        migrations.CreateModel(
            name='BlockList',
            fields=[
                ('block_id', models.AutoField(primary_key=True, serialize=False)),
                ('time_of_block', models.DateTimeField(auto_now_add=True)),
                ('blocked_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked', to='API.playerinfo')),
                ('player_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocker', to='API.playerinfo')),
            ],
            options={
                'verbose_name': 'BlockList',
                'verbose_name_plural': 'BlockList',
                'db_table': 'BlockList',
                'indexes': [models.Index(fields=['player_id', 'blocked_id'], name='BlockList_player__93bce5_idx')],
                'unique_together': {('player_id', 'blocked_id')},
            },
        ),
    ]
